#!/usr/bin/mawk -f

BEGIN{ 
OFS="\t" 
help=" \
    This script takes a grouping file and a decompressed VCF as input.\n \
    It outputs pi within each group and dxy between each pair of groups.\n \
    \n \
    Usage: \n \
    zcat file.vcf.gz | piawka [OPTIONS] groups_file - \n \
    \n \
    Options: \n \
    PIXY=1       calculate pixy-like pi instead of average weighted pi (default)\n \
    DXY=1        count between-group Dxy in addition to within-group pi (default)\n \
    MULT=1       use multiallelic sites\n \
    PERSITE=1    output values for each site instead of summary values\n \
    LOCUS='text' custom name of region to be shown in first column\n \
    HET=1        output heterozygosity, i.e. within-sample pi (unsets default DXY=1)\n \
    FST=XXX or 1 output Fst using one of the following estimators (sets DXY=1):\n \
                 HUD (default) : Hudson (1992) after Bhatia et al. (2013, eq. 10)\n \
                 WC : Weir and Cockerham (1984), biased for unequal groups with dissimilar Fst \n \
    MIS=0.5      maximum share of missing genotypes in groups at site (between 0 and 1);\n \
                 default 1 with PIXY=1 and 0.5 with PIXY=0\n \
    VERBOSE=1    output numerator, denominator, nGenotypes and nMissing as 8th-11th columns\n \
                 with PIXY=0 and PERSITE=0, numerator = sum of values and denominator = nUsed\n \
    NSITES=1000  length of locus to be passed as nSites (e.g. gene length);\n \
                 default is the range of the POS field in the provided VCF\n \
    \n \
    Example groups.tsv:\n \
    \n \
    sample1 grp1\n \
    sample2 grp1\n \
    sample3 grp2\n \
    sample4 grp3\n \
    \n \
    Samples missing from the VCF or groups file will be silently skipped.\n \
    If one sample is assigned to two groups, only one will be used.\n \
    \n \
    Output is the long-format table with seven columns (no header):\n \
    \n \
    locus_name, nSites, pop1, pop2, nUsed, metric, value\n \
    \n \
    where nSites = SNPs + invariant sites,\n \
          nUsed = nSites - sites with too many alleles or too much missing data\n \
    \n \
    Version: 0.7.8"
if ( !ARGV[1] ) { print help; exit }
}

# First file: store lists of group members in `groups` array
NR==FNR { 
    groupmem[$1]=HET ? $1 : $2
}

# Second file: process sites
NR>FNR && DATALINES {

  # Increment nSites
  if ( NSITES=="" || LOCUS=="" ) {
    if ( !minpos[$1] ) { minpos[$1]=$2 }
    maxpos[$1]=$2
  }

	# Process only SNPs (possibly monomorphic or multiallelic)
  # To obtain results identical to ksamuk/pixy, set $5 !~ /\*|,|[ACGT][ACGT]/
	if ( $4 ~ /^[ACGT]$/ && $5 !~ /\*|[ACGT][ACGT]/ ) {
  
    if ( PERSITE && LOCUS != "" ) { $1=LOCUS"_"$1 }
  
		# Reset site-specific parameters
		for (g in groups) { miss[g]=0; nalleles[g]=0; nseen[g]=0 }
		delete alleles
    delete seen
    delete seenlist

		# Pool GT values for groups, count each state and missing data
		for (i=10; i<=NF; i++) {
      grp=groupindex[i]
      if ( grp != "" ) {
        gtend=match( $i, ":" )
        if ( gtend==0 ) { gtend=length($i)+1 }
		  	for (c=1; c<gtend; c+=2) {
          al=substr($i,c,1)
		  		if ( al == "." ) {
		  			miss[grp]+=gtend/2
            break
          } else {
            if ( HET ) { thisal[al]++ }
		  			alleles[grp,al]++
		  			nalleles[grp]++
            if ( !seen[grp,al] ) {
              seen[grp,al]++
              seenlist[grp]=al seenlist[grp]
              nseen[grp]++
            }
          }
		  	}
        if ( HET && nalleles[grp] ) {
          nUsed[grp]++
          if ( MULT || nseen[grp]<=2 ) {
            if ( PIXY || PERSITE ) { 
              for ( x in thisal ) { numerator[grp]+=thisal[x]*(nalleles[grp]-thisal[x]) }
              denominator[grp]+=nalleles[grp]*(nalleles[grp]-1)
            } else {
                for ( x in thisal ) { pi[grp]+=(thisal[x]*(nalleles[grp]-thisal[x])) / (nalleles[grp]*(nalleles[grp]-1)) }
            }
          }
          if ( PERSITE ) { print $1"_"$2, 1, g, ".", 1, "het", formatOutput( numerator[grp], denominator[grp], nalleles[grp], miss[g] ) }
          delete thisal
        }
      }
		}

		# Calculate pi for groups with <50% missing data 
    # (if PIXY, use all sites with at least one genotype since miss[g]==0 )
    if ( !HET ) {
  		for ( g in seenlist ) {
  			if ( miss[g]/(miss[g]+nalleles[g]) <= MIS && ( MULT || nseen[g]<=2 ) ) {
  
  				# Increment number of sites used for calculation
  				nUsed[g]++
          
          # Extract allele counts of the group
          delete thesealleles
          delete bothalleles
          split(seenlist[g], xx, "")
          for (al in xx) {
            bothalleles[xx[al]]++
            thesealleles[xx[al]] = alleles[g,xx[al]]
          }
  
  				# Add to pi: probability that two randomly picked alleles differ
          thisnum[g]=nalleles[g]^2
          thisden[g]=nalleles[g]*(nalleles[g]-1)
          for ( x in thesealleles ) { thisnum[g]-=thesealleles[x]^2 }

          if ( PERSITE ) { 
            if ( thisden[g] ) { print $1"_"$2, 1, g, ".", 1, "pi", formatOutput( thisnum[g], thisden[g], nalleles[g], miss[g] ) }
          } else {
              if ( PIXY ) { 
                numerator[g]+=thisnum[g]; denominator[g]+=thisden[g] 
              } else { 
                pi[g]+=thisnum[g]/thisden[g]
              }
              if ( VERBOSE ) {
                allmiss[g]+=miss[g]
                allgeno[g]+=nalleles[g]
              }
            }
  
  				# Calculate pi between this group and all other groups with <50% missing data
          if ( DXY ) {
  			  	for ( g2 in seenlist ) {
  			  		if ( g2 < g && miss[g2]/(miss[g2]+nalleles[g2]) <= MIS && ( MULT || nseen[g2]<=2 ) ) {
              
                # Is the union of allelic states from g1 and g2 bigger than nseen[g1]?
                poolsize=nseen[g]

                # Extract alleles of the group
                delete thosealleles
                split(seenlist[g2], yy, "")
                for (al in yy) {
                  bothalleles[yy[al]]++ # so far keeps alleles from comparisons of g with previous groups
                  thosealleles[yy[al]] = alleles[g2,yy[al]]
                  if ( !thesealleles[yy[al]] ) { poolsize++ }
                }

                # If not MULT, proceed only if common allele pool has <=2 alleles
                if ( MULT || poolsize <= 2 ) {

  			  	    	# Increment number of sites used for dxy
  			  	    	nUsed[g,g2]++
                  
  			  	    	# Add to dxy: probability that two alleles picked from two groups differ
                  # subtraction rather than addition inspired by https://pubmed.ncbi.nlm.nih.gov/36031871/
                  thisnum[g,g2]=nalleles[g]*nalleles[g2]
                  thisden[g,g2]=thisnum[g,g2]
                  if ( FST ) { thisfstnum=""; thisfstden="" }
                  for ( x in bothalleles ) { 
                    if ( thesealleles[x] || thosealleles[x] ) {
                      thisnum[g,g2]-=thesealleles[x]*thosealleles[x]
                      if ( FST ) {
                        if ( FST=="HUD" ) { 
                          incrementFstHudson( thesealleles[x], thosealleles[x], nalleles[g], nalleles[g2] )
                        } else if ( FST=="WC" ) { 
                          incrementFstWeirCockerham( thesealleles[x], thosealleles[x], nalleles[g], nalleles[g2] )
                        } 
                        if ( !MULT ) { break } # no need to increment twice for biallelic comparisons
                      }
                    }
                  }
                  if ( PERSITE ) { 
                    if ( thisden[g,g2] ) { print $1"_"$2, 1, g, g2, 1, "dxy", formatOutput( thisnum[g,g2], thisden[g,g2], nalleles[g]+nalleles[g2], miss[g]+miss[g2] ) }
                    if ( FST && thisfstden ) { print $1"_"$2, 1, g, g2, 1, "Fst_"FST, formatOutput( thisfstnum, thisfstden, nalleles[g]+nalleles[g2], miss[g]+miss[g2] ) }
                  } else {
                      if ( PIXY ) { numerator[g,g2]+=thisnum[g,g2]; denominator[g,g2]+=thisden[g,g2] 
                      } else { dxy[g,g2]+=thisnum[g,g2]/thisden[g,g2] }
                      if ( FST ) { fst_numerator[g,g2]+=thisfstnum; fst_denominator[g,g2]+=thisfstden }
                    }
  			  	    }
              }
  			    }
  		    }
        }
	    }
    }
  }
}

# Second file (VCF), header line
NR>FNR && /^#CHROM/ {

  # Set default variable values
  if ( PIXY == "" ) { PIXY=1 }
  if ( !HET && DXY == "" ) { DXY=1 }
  if ( FST ) { DXY=1; if ( FST==1 ) { FST = "HUD" } }
  if ( MIS == "" ) { PIXY ? MIS=1 : MIS=0.5 }
  if ( NSITES!="" ) { nSites=NSITES }

  # Assign sample positions to groups
  for (i=10; i<=NF; i++) {
    if ( groupmem[$i] != "" ) { 
       groupindex[i]=groupmem[$i]
       groups[groupmem[$i]]++
     }
  }
  # Store group combinations
  if ( DXY && !PERSITE ) {
    for (g in groups) {
      for (g2 in groups) {
        if (g2 < g) { combs[g,g2]++ }
      }
    }
  }
  DATALINES=1
}

END {
  if ( !PERSITE ) {
    
    # Prepare "metric" field for output
    PIXY ? metric="pixy" : metric="w"
    if ( HET ) { metric="het_" metric }

    if ( LOCUS=="" ) {
      for ( i in minpos ) { 
          LOCUS = i"_"minpos[i]"_"maxpos[i]"_"LOCUS
      }
      LOCUS=substr(LOCUS,1,length(LOCUS)-1)
    }
    if ( NSITES=="" ) { 
      for ( i in minpos ) {
        nSites+=maxpos[i]-minpos[i]+1
      }
    }

  	for (g in groups) {
      if ( nUsed[g] ) {
        if ( PIXY ) { pinum[g] = numerator[g]; piden[g] = denominator[g] 
        } else { pinum[g] = pi[g]; piden[g] = nUsed[g] }
        print LOCUS, nSites, g, ".", nUsed[g], HET ? metric : "pi_"metric , formatOutput( pinum[g], piden[g], allgeno[g], allmiss[g] )
      }
    }
  	for (i in combs) {
      if ( nUsed[i] ) { 
        if ( PIXY ) { dxynum[i] = numerator[i]; dxyden[i]=denominator[i] 
        } else { dxynum[i] = dxy[i]; dxyden[i]=nUsed[i] }
        split(i, ii, SUBSEP)
        print LOCUS, nSites, ii[1], ii[2], nUsed[i], "dxy_"metric, formatOutput( dxynum[i], dxyden[i], allgeno[ii[1]]+allgeno[ii[2]], allmiss[ii[1]]+allmiss[ii[2]] )
        if ( fst_denominator[i] ) { 
          print LOCUS, nSites, ii[1], ii[2], nUsed[i], "Fst_"FST, formatOutput( fst_numerator[i], fst_denominator[i], allgeno[ii[1]]+allgeno[ii[2]], allmiss[ii[1]]+allmiss[ii[2]] ) 
        }
      }
    }
  }
}

### FUNCTIONS

# Print just the value or value, numerator, denominator if VERBOSE
function formatOutput( numerator, denominator, nGeno, nMiss ) {
  out=numerator/denominator
  if ( VERBOSE ) { 
      out = out"\t"numerator"\t"denominator"\t"nGeno"\t"nMiss
  }
  return out
}

function incrementFstHudson( a1, a2, n1, n2 ) {
  pi1 = a1 * (n1 - a1) / (n1*(n1-1))
  pi2 = a2 * (n2 - a2) / (n2*(n2-1))
  hw = pi1 + pi2
  hb = ( a1 * (n2-a2) + a2*(n1-a1) ) / (n1*n2)
  thisfstnum+=hb-hw
  thisfstden+=hb
} 

function incrementFstWeirCockerham( a1, a2, n1, n2 ) {
  # Formula from Bhatia et al. 2013, eq. (6)
  sizes = n1 * n2 / ( n1 + n2 )
  frac = 1 / ( n1 + n2 - 2 )
  mism = n1 * ( a1 / n1 ) * ( 1 - a1 / n1 ) + n2 * ( a2 / n2 ) * ( 1 - a2 / n2 )

  den = sizes * ( a1 / n1 - a2 / n2 )^2 + ( 2 * sizes - 1 ) * frac * mism
  if ( ! den ) { return } # WC Fst is NaN at uniform sites
  thisfstnum += den - 2 * sizes * frac * mism
  thisfstden += den
}

